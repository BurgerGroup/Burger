// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace burgerRpc {

namespace {

const ::google::protobuf::Descriptor* ResultCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FriendServiceRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  ResultCode_descriptor_ = file->message_type(0);
  static const int ResultCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCode, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCode, errmsg_),
  };
  ResultCode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultCode_descriptor_,
      ResultCode::default_instance_,
      ResultCode_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResultCode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCode, _is_default_instance_));
  GetFriendListRequest_descriptor_ = file->message_type(1);
  static const int GetFriendListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, userid_),
  };
  GetFriendListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendListRequest_descriptor_,
      GetFriendListRequest::default_instance_,
      GetFriendListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _is_default_instance_));
  GetFriendListResponse_descriptor_ = file->message_type(2);
  static const int GetFriendListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, friends_),
  };
  GetFriendListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendListResponse_descriptor_,
      GetFriendListResponse::default_instance_,
      GetFriendListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _is_default_instance_));
  FriendServiceRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultCode_descriptor_, &ResultCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendListRequest_descriptor_, &GetFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendListResponse_descriptor_, &GetFriendListResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete ResultCode::default_instance_;
  delete ResultCode_reflection_;
  delete GetFriendListRequest::default_instance_;
  delete GetFriendListRequest_reflection_;
  delete GetFriendListResponse::default_instance_;
  delete GetFriendListResponse_reflection_;
}

void protobuf_AddDesc_friend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\tburgerRpc\"-\n\nResultCode\022"
    "\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014\"&\n\024GetF"
    "riendListRequest\022\016\n\006userid\030\001 \001(\r\"O\n\025GetF"
    "riendListResponse\022%\n\006result\030\001 \001(\0132\025.burg"
    "erRpc.ResultCode\022\017\n\007friends\030\002 \003(\0142f\n\020Fri"
    "endServiceRpc\022R\n\rGetFriendList\022\037.burgerR"
    "pc.GetFriendListRequest\032 .burgerRpc.GetF"
    "riendListResponseB\003\200\001\001b\006proto3", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  ResultCode::default_instance_ = new ResultCode();
  GetFriendListRequest::default_instance_ = new GetFriendListRequest();
  GetFriendListResponse::default_instance_ = new GetFriendListResponse();
  ResultCode::default_instance_->InitAsDefaultInstance();
  GetFriendListRequest::default_instance_->InitAsDefaultInstance();
  GetFriendListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultCode::kErrcodeFieldNumber;
const int ResultCode::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultCode::ResultCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:burgerRpc.ResultCode)
}

void ResultCode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResultCode::ResultCode(const ResultCode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:burgerRpc.ResultCode)
}

void ResultCode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = 0;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:burgerRpc.ResultCode)
  SharedDtor();
}

void ResultCode::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResultCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultCode_descriptor_;
}

const ResultCode& ResultCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ResultCode* ResultCode::default_instance_ = NULL;

ResultCode* ResultCode::New(::google::protobuf::Arena* arena) const {
  ResultCode* n = new ResultCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:burgerRpc.ResultCode)
  errcode_ = 0;
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResultCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:burgerRpc.ResultCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional bytes errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:burgerRpc.ResultCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:burgerRpc.ResultCode)
  return false;
#undef DO_
}

void ResultCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:burgerRpc.ResultCode)
  // optional int32 errcode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  // optional bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->errmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:burgerRpc.ResultCode)
}

::google::protobuf::uint8* ResultCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:burgerRpc.ResultCode)
  // optional int32 errcode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  // optional bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->errmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:burgerRpc.ResultCode)
  return target;
}

int ResultCode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:burgerRpc.ResultCode)
  int total_size = 0;

  // optional int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  // optional bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->errmsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:burgerRpc.ResultCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResultCode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:burgerRpc.ResultCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:burgerRpc.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:burgerRpc.ResultCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void ResultCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:burgerRpc.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:burgerRpc.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {

  return true;
}

void ResultCode::Swap(ResultCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultCode::InternalSwap(ResultCode* other) {
  std::swap(errcode_, other->errcode_);
  errmsg_.Swap(&other->errmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultCode_descriptor_;
  metadata.reflection = ResultCode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultCode

// optional int32 errcode = 1;
void ResultCode::clear_errcode() {
  errcode_ = 0;
}
 ::google::protobuf::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:burgerRpc.ResultCode.errcode)
  return errcode_;
}
 void ResultCode::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:burgerRpc.ResultCode.errcode)
}

// optional bytes errmsg = 2;
void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:burgerRpc.ResultCode.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResultCode::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:burgerRpc.ResultCode.errmsg)
}
 void ResultCode::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:burgerRpc.ResultCode.errmsg)
}
 void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:burgerRpc.ResultCode.errmsg)
}
 ::std::string* ResultCode::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:burgerRpc.ResultCode.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:burgerRpc.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResultCode::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:burgerRpc.ResultCode.errmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendListRequest::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendListRequest::GetFriendListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:burgerRpc.GetFriendListRequest)
}

void GetFriendListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetFriendListRequest::GetFriendListRequest(const GetFriendListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:burgerRpc.GetFriendListRequest)
}

void GetFriendListRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userid_ = 0u;
}

GetFriendListRequest::~GetFriendListRequest() {
  // @@protoc_insertion_point(destructor:burgerRpc.GetFriendListRequest)
  SharedDtor();
}

void GetFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListRequest_descriptor_;
}

const GetFriendListRequest& GetFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

GetFriendListRequest* GetFriendListRequest::default_instance_ = NULL;

GetFriendListRequest* GetFriendListRequest::New(::google::protobuf::Arena* arena) const {
  GetFriendListRequest* n = new GetFriendListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:burgerRpc.GetFriendListRequest)
  userid_ = 0u;
}

bool GetFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:burgerRpc.GetFriendListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:burgerRpc.GetFriendListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:burgerRpc.GetFriendListRequest)
  return false;
#undef DO_
}

void GetFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:burgerRpc.GetFriendListRequest)
  // optional uint32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:burgerRpc.GetFriendListRequest)
}

::google::protobuf::uint8* GetFriendListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:burgerRpc.GetFriendListRequest)
  // optional uint32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:burgerRpc.GetFriendListRequest)
  return target;
}

int GetFriendListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:burgerRpc.GetFriendListRequest)
  int total_size = 0;

  // optional uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:burgerRpc.GetFriendListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:burgerRpc.GetFriendListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:burgerRpc.GetFriendListRequest)
    MergeFrom(*source);
  }
}

void GetFriendListRequest::MergeFrom(const GetFriendListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:burgerRpc.GetFriendListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void GetFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:burgerRpc.GetFriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRequest::CopyFrom(const GetFriendListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:burgerRpc.GetFriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRequest::IsInitialized() const {

  return true;
}

void GetFriendListRequest::Swap(GetFriendListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendListRequest::InternalSwap(GetFriendListRequest* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListRequest_descriptor_;
  metadata.reflection = GetFriendListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendListRequest

// optional uint32 userid = 1;
void GetFriendListRequest::clear_userid() {
  userid_ = 0u;
}
 ::google::protobuf::uint32 GetFriendListRequest::userid() const {
  // @@protoc_insertion_point(field_get:burgerRpc.GetFriendListRequest.userid)
  return userid_;
}
 void GetFriendListRequest::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:burgerRpc.GetFriendListRequest.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendListResponse::kResultFieldNumber;
const int GetFriendListResponse::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendListResponse::GetFriendListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:burgerRpc.GetFriendListResponse)
}

void GetFriendListResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  result_ = const_cast< ::burgerRpc::ResultCode*>(&::burgerRpc::ResultCode::default_instance());
}

GetFriendListResponse::GetFriendListResponse(const GetFriendListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:burgerRpc.GetFriendListResponse)
}

void GetFriendListResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
}

GetFriendListResponse::~GetFriendListResponse() {
  // @@protoc_insertion_point(destructor:burgerRpc.GetFriendListResponse)
  SharedDtor();
}

void GetFriendListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListResponse_descriptor_;
}

const GetFriendListResponse& GetFriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

GetFriendListResponse* GetFriendListResponse::default_instance_ = NULL;

GetFriendListResponse* GetFriendListResponse::New(::google::protobuf::Arena* arena) const {
  GetFriendListResponse* n = new GetFriendListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:burgerRpc.GetFriendListResponse)
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
  friends_.Clear();
}

bool GetFriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:burgerRpc.GetFriendListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .burgerRpc.ResultCode result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated bytes friends = 2;
      case 2: {
        if (tag == 18) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:burgerRpc.GetFriendListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:burgerRpc.GetFriendListResponse)
  return false;
#undef DO_
}

void GetFriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:burgerRpc.GetFriendListResponse)
  // optional .burgerRpc.ResultCode result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // repeated bytes friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:burgerRpc.GetFriendListResponse)
}

::google::protobuf::uint8* GetFriendListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:burgerRpc.GetFriendListResponse)
  // optional .burgerRpc.ResultCode result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // repeated bytes friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->friends(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:burgerRpc.GetFriendListResponse)
  return target;
}

int GetFriendListResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:burgerRpc.GetFriendListResponse)
  int total_size = 0;

  // optional .burgerRpc.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  // repeated bytes friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:burgerRpc.GetFriendListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:burgerRpc.GetFriendListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:burgerRpc.GetFriendListResponse)
    MergeFrom(*source);
  }
}

void GetFriendListResponse::MergeFrom(const GetFriendListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:burgerRpc.GetFriendListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  friends_.MergeFrom(from.friends_);
  if (from.has_result()) {
    mutable_result()->::burgerRpc::ResultCode::MergeFrom(from.result());
  }
}

void GetFriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:burgerRpc.GetFriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListResponse::CopyFrom(const GetFriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:burgerRpc.GetFriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListResponse::IsInitialized() const {

  return true;
}

void GetFriendListResponse::Swap(GetFriendListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendListResponse::InternalSwap(GetFriendListResponse* other) {
  std::swap(result_, other->result_);
  friends_.UnsafeArenaSwap(&other->friends_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListResponse_descriptor_;
  metadata.reflection = GetFriendListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendListResponse

// optional .burgerRpc.ResultCode result = 1;
bool GetFriendListResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void GetFriendListResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::burgerRpc::ResultCode& GetFriendListResponse::result() const {
  // @@protoc_insertion_point(field_get:burgerRpc.GetFriendListResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::burgerRpc::ResultCode* GetFriendListResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::burgerRpc::ResultCode;
  }
  // @@protoc_insertion_point(field_mutable:burgerRpc.GetFriendListResponse.result)
  return result_;
}
::burgerRpc::ResultCode* GetFriendListResponse::release_result() {
  // @@protoc_insertion_point(field_release:burgerRpc.GetFriendListResponse.result)
  
  ::burgerRpc::ResultCode* temp = result_;
  result_ = NULL;
  return temp;
}
void GetFriendListResponse::set_allocated_result(::burgerRpc::ResultCode* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:burgerRpc.GetFriendListResponse.result)
}

// repeated bytes friends = 2;
int GetFriendListResponse::friends_size() const {
  return friends_.size();
}
void GetFriendListResponse::clear_friends() {
  friends_.Clear();
}
 const ::std::string& GetFriendListResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:burgerRpc.GetFriendListResponse.friends)
  return friends_.Get(index);
}
 ::std::string* GetFriendListResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:burgerRpc.GetFriendListResponse.friends)
  return friends_.Mutable(index);
}
 void GetFriendListResponse::set_friends(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:burgerRpc.GetFriendListResponse.friends)
  friends_.Mutable(index)->assign(value);
}
 void GetFriendListResponse::set_friends(int index, const char* value) {
  friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:burgerRpc.GetFriendListResponse.friends)
}
 void GetFriendListResponse::set_friends(int index, const void* value, size_t size) {
  friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:burgerRpc.GetFriendListResponse.friends)
}
 ::std::string* GetFriendListResponse::add_friends() {
  // @@protoc_insertion_point(field_add_mutable:burgerRpc.GetFriendListResponse.friends)
  return friends_.Add();
}
 void GetFriendListResponse::add_friends(const ::std::string& value) {
  friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:burgerRpc.GetFriendListResponse.friends)
}
 void GetFriendListResponse::add_friends(const char* value) {
  friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:burgerRpc.GetFriendListResponse.friends)
}
 void GetFriendListResponse::add_friends(const void* value, size_t size) {
  friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:burgerRpc.GetFriendListResponse.friends)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFriendListResponse::friends() const {
  // @@protoc_insertion_point(field_list:burgerRpc.GetFriendListResponse.friends)
  return friends_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFriendListResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:burgerRpc.GetFriendListResponse.friends)
  return &friends_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FriendServiceRpc::~FriendServiceRpc() {}

const ::google::protobuf::ServiceDescriptor* FriendServiceRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendServiceRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FriendServiceRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendServiceRpc_descriptor_;
}

void FriendServiceRpc::GetFriendList(::google::protobuf::RpcController* controller,
                         const ::burgerRpc::GetFriendListRequest*,
                         ::burgerRpc::GetFriendListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendServiceRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FriendServiceRpc_descriptor_);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::google::protobuf::down_cast<const ::burgerRpc::GetFriendListRequest*>(request),
             ::google::protobuf::down_cast< ::burgerRpc::GetFriendListResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendServiceRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::burgerRpc::GetFriendListRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FriendServiceRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::burgerRpc::GetFriendListResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendServiceRpc_Stub::FriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendServiceRpc_Stub::FriendServiceRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendServiceRpc_Stub::~FriendServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendServiceRpc_Stub::GetFriendList(::google::protobuf::RpcController* controller,
                              const ::burgerRpc::GetFriendListRequest* request,
                              ::burgerRpc::GetFriendListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace burgerRpc

// @@protoc_insertion_point(global_scope)
