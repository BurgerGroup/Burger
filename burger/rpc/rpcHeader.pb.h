// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcHeader.proto

#ifndef PROTOBUF_rpcHeader_2eproto__INCLUDED
#define PROTOBUF_rpcHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace burger {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rpcHeader_2eproto();
void protobuf_AssignDesc_rpcHeader_2eproto();
void protobuf_ShutdownFile_rpcHeader_2eproto();

class RpcHeader;

// ===================================================================

class RpcHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:burger.rpc.RpcHeader) */ {
 public:
  RpcHeader();
  virtual ~RpcHeader();

  RpcHeader(const RpcHeader& from);

  inline RpcHeader& operator=(const RpcHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcHeader& default_instance();

  void Swap(RpcHeader* other);

  // implements Message ----------------------------------------------

  inline RpcHeader* New() const { return New(NULL); }

  RpcHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcHeader& from);
  void MergeFrom(const RpcHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  void set_servicename(const char* value);
  void set_servicename(const void* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // optional bytes methodName = 2;
  void clear_methodname();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& methodname() const;
  void set_methodname(const ::std::string& value);
  void set_methodname(const char* value);
  void set_methodname(const void* value, size_t size);
  ::std::string* mutable_methodname();
  ::std::string* release_methodname();
  void set_allocated_methodname(::std::string* methodname);

  // optional uint32 argsSize = 3;
  void clear_argssize();
  static const int kArgsSizeFieldNumber = 3;
  ::google::protobuf::uint32 argssize() const;
  void set_argssize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:burger.rpc.RpcHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr methodname_;
  ::google::protobuf::uint32 argssize_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpcHeader_2eproto();
  friend void protobuf_AssignDesc_rpcHeader_2eproto();
  friend void protobuf_ShutdownFile_rpcHeader_2eproto();

  void InitAsDefaultInstance();
  static RpcHeader* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcHeader

// optional bytes serviceName = 1;
inline void RpcHeader::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcHeader::servicename() const {
  // @@protoc_insertion_point(field_get:burger.rpc.RpcHeader.serviceName)
  return servicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcHeader::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:burger.rpc.RpcHeader.serviceName)
}
inline void RpcHeader::set_servicename(const char* value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:burger.rpc.RpcHeader.serviceName)
}
inline void RpcHeader::set_servicename(const void* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:burger.rpc.RpcHeader.serviceName)
}
inline ::std::string* RpcHeader::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:burger.rpc.RpcHeader.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcHeader::release_servicename() {
  // @@protoc_insertion_point(field_release:burger.rpc.RpcHeader.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcHeader::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:burger.rpc.RpcHeader.serviceName)
}

// optional bytes methodName = 2;
inline void RpcHeader::clear_methodname() {
  methodname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcHeader::methodname() const {
  // @@protoc_insertion_point(field_get:burger.rpc.RpcHeader.methodName)
  return methodname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcHeader::set_methodname(const ::std::string& value) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:burger.rpc.RpcHeader.methodName)
}
inline void RpcHeader::set_methodname(const char* value) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:burger.rpc.RpcHeader.methodName)
}
inline void RpcHeader::set_methodname(const void* value, size_t size) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:burger.rpc.RpcHeader.methodName)
}
inline ::std::string* RpcHeader::mutable_methodname() {
  
  // @@protoc_insertion_point(field_mutable:burger.rpc.RpcHeader.methodName)
  return methodname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcHeader::release_methodname() {
  // @@protoc_insertion_point(field_release:burger.rpc.RpcHeader.methodName)
  
  return methodname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcHeader::set_allocated_methodname(::std::string* methodname) {
  if (methodname != NULL) {
    
  } else {
    
  }
  methodname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodname);
  // @@protoc_insertion_point(field_set_allocated:burger.rpc.RpcHeader.methodName)
}

// optional uint32 argsSize = 3;
inline void RpcHeader::clear_argssize() {
  argssize_ = 0u;
}
inline ::google::protobuf::uint32 RpcHeader::argssize() const {
  // @@protoc_insertion_point(field_get:burger.rpc.RpcHeader.argsSize)
  return argssize_;
}
inline void RpcHeader::set_argssize(::google::protobuf::uint32 value) {
  
  argssize_ = value;
  // @@protoc_insertion_point(field_set:burger.rpc.RpcHeader.argsSize)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace burger

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcHeader_2eproto__INCLUDED
